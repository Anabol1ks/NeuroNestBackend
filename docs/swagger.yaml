definitions:
  handlers.LoginInput:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: yi29jksA
        type: string
    required:
    - email
    - password
    type: object
  handlers.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handlers.RegisterInput:
    properties:
      email:
        example: user@example.com
        type: string
      nickname:
        example: user123
        type: string
      password:
        example: yi29jksA
        type: string
    required:
    - email
    - nickname
    - password
    type: object
  handlers.TagInput:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  handlers.UpdateProfileInput:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      profile_pic:
        type: string
    type: object
  response.AttachmentShort:
    properties:
      file_size:
        type: integer
      file_type:
        type: string
      file_url:
        type: string
      id:
        type: integer
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      details:
        type: string
      message:
        type: string
    type: object
  response.NoteResponse:
    properties:
      attachments:
        items:
          $ref: '#/definitions/response.AttachmentShort'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_archived:
        type: boolean
      related_ids:
        items:
          type: integer
        type: array
      summary:
        type: string
      tags:
        items:
          $ref: '#/definitions/response.TagShort'
        type: array
      title:
        type: string
      topic_id:
        type: integer
      updated_at:
        type: string
    type: object
  response.NotesListResponse:
    properties:
      notes:
        items:
          $ref: '#/definitions/response.NoteResponse'
        type: array
      total:
        type: integer
    type: object
  response.ProfileResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      profile_pic:
        description: Ссылка на фото профиля
        type: string
    type: object
  response.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  response.SummarizeResponse:
    properties:
      summary:
        type: string
    type: object
  response.TagResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  response.TagShort:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  response.TagsListResponse:
    properties:
      tags:
        items:
          $ref: '#/definitions/response.TagResponse'
        type: array
      total:
        type: integer
    type: object
  response.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJI...
        type: string
      refresh_token:
        example: eyJhbGciOi...
        type: string
    type: object
  response.UploadAvatarResponse:
    properties:
      message:
        type: string
      profile_pic:
        type: string
    type: object
info:
  contact: {}
  title: '---'
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя и получение токенов
      parameters:
      - description: Данные для авторизации
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Ошибка валидации данных (VALIDATION_ERROR)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Неверный email или пароль (INVALID_CREDENTIALS)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера (TOKEN_GENERATION_ERROR)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Авторизация пользователя
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновление access токена с помощью refresh токена
      parameters:
      - description: Refresh токен
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление access токена
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Ошибка валидации данных (VALIDATION_ERROR)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Неверный или просроченный refresh токен (INVALID_REFRESH_TOKEN)
            или пользователь не найден (USER_NOT_FOUND)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера (TOKEN_GENERATION_ERROR)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Обновление access токена
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Ошибка валидации (VALIDATION_ERROR) или пользователь уже существует
            (EMAIL_EXISTS)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера (PASSWORD_HASH_ERROR, DB_ERROR)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - auth
  /auth/yandex/callback:
    get:
      consumes:
      - application/json
      description: Обрабатывает callback от Yandex OAuth, получает токены и данные
        пользователя
      parameters:
      - description: Код авторизации от Yandex
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Ошибка валидации (OAUTH_ERROR)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера (OAUTH_ERROR, DB_ERROR, TOKEN_GENERATION_ERROR)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Callback от Yandex OAuth
      tags:
      - auth
  /auth/yandex/login:
    get:
      consumes:
      - application/json
      description: Перенаправляет пользователя на страницу авторизации Yandex
      produces:
      - application/json
      responses:
        "302":
          description: Редирект на страницу авторизации Yandex
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Редирект на Yandex OAuth
      tags:
      - auth
  /notes/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет заметку пользователя по id и все связанные вложения
      parameters:
      - description: ID заметки
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Заметка успешно удалена
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Заметка не найдена NOTE_NOT_FOUND
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка при удалении заметки DB_ERROR
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление заметки
      tags:
      - note
    get:
      consumes:
      - application/json
      description: Получение заметки пользователя по id
      parameters:
      - description: ID заметки
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Заметка успешно получена
          schema:
            $ref: '#/definitions/response.NoteResponse'
        "404":
          description: Заметка не найдена NOTE_NOT_FOUND
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получения заметки
      tags:
      - note
  /notes/{id}/archive:
    patch:
      consumes:
      - application/json
      description: Переносит заметку пользователя в архив (IsArchived = true)
      parameters:
      - description: ID заметки
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Заметка архивирована
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Заметка не найдена NOTE_NOT_FOUND
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка при архивировании заметки DB_ERROR
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Архивировать заметку
      tags:
      - note
  /notes/{id}/summarize:
    post:
      consumes:
      - application/json
      description: Генерирует краткое резюме для заметки пользователя по её ID
      parameters:
      - description: ID заметки
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Резюме успешно сгенерировано
          schema:
            $ref: '#/definitions/response.SummarizeResponse'
        "404":
          description: Заметка не найдена NOTE_NOT_FOUND
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка генерации резюме SUMMARY_ERROR, Ошибка сохранения резюме
            SUMMARY_SAVE_ERROR
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Суммаризация заметки по ID
      tags:
      - note
  /notes/create:
    post:
      consumes:
      - multipart/form-data
      description: Создаёт новую заметку пользователя с генерацией эмбеддинга, тегами
        и вложениями
      parameters:
      - description: Заголовок
        in: formData
        name: title
        required: true
        type: string
      - description: Содержимое
        in: formData
        name: content
        required: true
        type: string
      - collectionFormat: csv
        description: ID связанных заметок
        in: formData
        items:
          type: integer
        name: related_ids
        type: array
      - collectionFormat: csv
        description: ID тегов
        in: formData
        items:
          type: integer
        name: tag_ids
        type: array
      - collectionFormat: csv
        description: Вложения (image, audio, pdf)
        in: formData
        items:
          type: file
        name: attachments
        type: array
      produces:
      - application/json
      responses:
        "201":
          description: Заметка успешно создана
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать заметку
      tags:
      - note
  /notes/list:
    get:
      consumes:
      - application/json
      description: Выдаёт список всех заметок авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Список заметок
          schema:
            $ref: '#/definitions/response.NotesListResponse'
        "500":
          description: 'Ошибка при получении заметок: DB_ERROR'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получения списка заметок
      tags:
      - note
  /profile/delete-avatar:
    delete:
      consumes:
      - application/json
      description: Удаляет аватарку пользователя с сервера и очищает ссылку в базе
        данных.
      produces:
      - application/json
      responses:
        "200":
          description: Аватарка успешно удалена
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Аватарка не найдена
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление аватарки пользователя
      tags:
      - profile
  /profile/get:
    get:
      consumes:
      - application/json
      description: Получает информацию о пользователе по его ID
      produces:
      - application/json
      responses:
        "200":
          description: Информация о профиле пользователя
          schema:
            $ref: '#/definitions/response.ProfileResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение информации о профиле
      tags:
      - profile
  /profile/update:
    put:
      consumes:
      - application/json
      description: Обновляет информацию профиля пользователя (кроме email)
      parameters:
      - description: Данные для обновления профиля
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProfileInput'
      produces:
      - application/json
      responses:
        "200":
          description: Профиль успешно обновлен
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление информации профиля
      tags:
      - profile
  /profile/upload-avatar:
    post:
      consumes:
      - multipart/form-data
      description: Позволяет пользователю загрузить аватарку. Поддерживаются форматы
        PNG, JPG, JPEG. Максимальный размер файла — 2MB.
      parameters:
      - description: Аватарка пользователя
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Файл успешно загружен
          schema:
            $ref: '#/definitions/response.UploadAvatarResponse'
        "400":
          description: Ошибка валидации (например, файл слишком большой или неподдерживаемый
            формат)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: 'Пользователь не найден CODE: USER_NOT_FOUND'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка сервера (например, ошибка сохранения файла или базы
            данных)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Загрузка аватарки пользователя
      tags:
      - profile
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет тег пользователя по id
      parameters:
      - description: ID тега
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Тег успешно удалён
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Тег не найден TAG_NOT_FOUND
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка при удалении тега DB_ERROR
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление тега
      tags:
      - tag
  /tags/create:
    post:
      consumes:
      - application/json
      description: Создаёт новый тег
      parameters:
      - description: Данные заметки
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/handlers.TagInput'
      produces:
      - application/json
      responses:
        "201":
          description: Тег успешно создан
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка при создании тега
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать тег
      tags:
      - tag
  /tags/list:
    get:
      consumes:
      - application/json
      description: Возвращает список тегов пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Список тегов пользователя
          schema:
            items:
              $ref: '#/definitions/response.TagsListResponse'
            type: array
        "500":
          description: Ошибка при получении тегов
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить теги
      tags:
      - tag
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
