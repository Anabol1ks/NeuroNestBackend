// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Авторизация пользователя и получение токенов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация пользователя",
                "parameters": [
                    {
                        "description": "Данные для авторизации",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная авторизация",
                        "schema": {
                            "$ref": "#/definitions/response.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных (VALIDATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неверный email или пароль (INVALID_CREDENTIALS)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (TOKEN_GENERATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Обновление access токена с помощью refresh токена",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Обновление access токена",
                "parameters": [
                    {
                        "description": "Refresh токен",
                        "name": "refresh_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление access токена",
                        "schema": {
                            "$ref": "#/definitions/response.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных (VALIDATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неверный или просроченный refresh токен (INVALID_REFRESH_TOKEN) или пользователь не найден (USER_NOT_FOUND)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (TOKEN_GENERATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Регистрация нового пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь успешно зарегистрирован",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации (VALIDATION_ERROR) или пользователь уже существует (EMAIL_EXISTS)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (PASSWORD_HASH_ERROR, DB_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/yandex/callback": {
            "get": {
                "description": "Обрабатывает callback от Yandex OAuth, получает токены и данные пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Callback от Yandex OAuth",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Код авторизации от Yandex",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная авторизация",
                        "schema": {
                            "$ref": "#/definitions/response.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации (OAUTH_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (OAUTH_ERROR, DB_ERROR, TOKEN_GENERATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/yandex/login": {
            "get": {
                "description": "Перенаправляет пользователя на страницу авторизации Yandex",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Редирект на Yandex OAuth",
                "responses": {
                    "302": {
                        "description": "Редирект на страницу авторизации Yandex"
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notes/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Создаёт новую заметку пользователя с генерацией эмбеддинга",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Создать заметку",
                "parameters": [
                    {
                        "description": "Данные заметки",
                        "name": "note",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateNoteInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Заметка успешно создана",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка генерации эмбеддинга EMBEDDING_ERROR   Ошибка сериализации эмбеддинга EMBEDDING_SERIALIZE_ERROR",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notes/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Выдаёт список всех заметок авторизованного пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Получения списка заметок",
                "responses": {
                    "200": {
                        "description": "Список заметок",
                        "schema": {
                            "$ref": "#/definitions/response.NotesListResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении заметок: DB_ERROR",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получение заметки пользователя по id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Получения заметки",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID заметки",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Заметка успешно получена",
                        "schema": {
                            "$ref": "#/definitions/response.NoteResponse"
                        }
                    },
                    "404": {
                        "description": "Заметка не найдена NOTE_NOT_FOUND",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Удаляет заметку пользователя по id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Удаление заметки",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID заметки",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Заметка успешно удалена",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Заметка не найдена NOTE_NOT_FOUND",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка при удалении заметки DB_ERROR",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notes/{id}/archive": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Переносит заметку пользователя в архив (IsArchived = true)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Архивировать заметку",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID заметки",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Заметка архивирована",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Заметка не найдена NOTE_NOT_FOUND",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка при архивировании заметки DB_ERROR",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notes/{id}/summarize": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Генерирует краткое резюме для заметки пользователя по её ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Суммаризация заметки по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID заметки",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Резюме успешно сгенерировано",
                        "schema": {
                            "$ref": "#/definitions/response.SummarizeResponse"
                        }
                    },
                    "404": {
                        "description": "Заметка не найдена NOTE_NOT_FOUND",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка генерации резюме SUMMARY_ERROR, Ошибка сохранения резюме SUMMARY_SAVE_ERROR",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/delete-avatar": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Удаляет аватарку пользователя с сервера и очищает ссылку в базе данных.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Удаление аватарки пользователя",
                "responses": {
                    "200": {
                        "description": "Аватарка успешно удалена",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Аватарка не найдена",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/get": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получает информацию о пользователе по его ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Получение информации о профиле",
                "responses": {
                    "200": {
                        "description": "Информация о профиле пользователя",
                        "schema": {
                            "$ref": "#/definitions/response.ProfileResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Обновляет информацию профиля пользователя (кроме email)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Обновление информации профиля",
                "parameters": [
                    {
                        "description": "Данные для обновления профиля",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateProfileInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Профиль успешно обновлен",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/upload-avatar": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Позволяет пользователю загрузить аватарку. Поддерживаются форматы PNG, JPG, JPEG. Максимальный размер файла — 2MB.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Загрузка аватарки пользователя",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Аватарка пользователя",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Файл успешно загружен",
                        "schema": {
                            "$ref": "#/definitions/response.UploadAvatarResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации (например, файл слишком большой или неподдерживаемый формат)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден CODE: USER_NOT_FOUND",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (например, ошибка сохранения файла или базы данных)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CreateNoteInput": {
            "type": "object",
            "required": [
                "content",
                "title"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "yi29jksA"
                }
            }
        },
        "handlers.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "handlers.RegisterInput": {
            "type": "object",
            "required": [
                "email",
                "nickname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "nickname": {
                    "type": "string",
                    "example": "user123"
                },
                "password": {
                    "type": "string",
                    "example": "yi29jksA"
                }
            }
        },
        "handlers.UpdateProfileInput": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "profile_pic": {
                    "type": "string"
                }
            }
        },
        "response.AttachmentShort": {
            "type": "object",
            "properties": {
                "file_size": {
                    "type": "integer"
                },
                "file_type": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.NoteResponse": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.AttachmentShort"
                    }
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_archived": {
                    "type": "boolean"
                },
                "related_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "summary": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.TagShort"
                    }
                },
                "title": {
                    "type": "string"
                },
                "topic_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "response.NotesListResponse": {
            "type": "object",
            "properties": {
                "notes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.NoteResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.ProfileResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "profile_pic": {
                    "description": "Ссылка на фото профиля",
                    "type": "string"
                }
            }
        },
        "response.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.SummarizeResponse": {
            "type": "object",
            "properties": {
                "summary": {
                    "type": "string"
                }
            }
        },
        "response.TagShort": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "response.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJI..."
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOi..."
                }
            }
        },
        "response.UploadAvatarResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "profile_pic": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "---",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
